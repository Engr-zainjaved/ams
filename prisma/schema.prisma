// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfrimation TwoFactorConfirmation?
  Booking               Booking[]
  FlightModification    FlightModification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Flight {
  id            String       @id @default(cuid())
  departure     DateTime
  arrival       DateTime
  origin        String
  destination   String
  economyPrice  Float
  businessPrice Float
  status        FlightStatus @default(AVAILABLE)

  bookings           Booking[]
  FlightModification FlightModification[]

  @@map("flights")
}

enum FlightStatus {
  AVAILABLE
  CANCELLED
  DELAYED
}

model Booking {
  id       String        @id @default(cuid())
  userId   String
  flightId String
  class    FlightClass
  status   BookingStatus @default(CONFIRMED)

  flight Flight @relation(fields: [flightId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

enum FlightClass {
  ECONOMY
  BUSINESS
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  UPGRADED
  DOWNGRADED
}

// Admin functionality extensions
model FlightModification {
  id         String   @id @default(cuid())
  flightId   String
  changedBy  String // Admin User ID
  changeType String
  oldValue   String
  newValue   String
  modifiedAt DateTime @default(now())

  flight Flight @relation(fields: [flightId], references: [id])
  admin  User   @relation(fields: [changedBy], references: [id])

  @@map("flight_modifications")
}
